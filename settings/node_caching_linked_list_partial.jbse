resolve begin


------------------------------------------------- 
-- representation invariants for this.l

-- for all the linked list nodes e, e.value is not a linked list node
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next|.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)+.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:value instanceof java/lang/Object aliases target {ROOT}:(?!{°}*node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next|.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)*{EOL}){°}*;

-- defines the NodeCachingLinkedList._owner instrumentation field necessary to triggers
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next|.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)*.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:_owner instanceof node_caching_linked_list/NodeCachingLinkedList not null;
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next|.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)*.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:_owner instanceof node_caching_linked_list/NodeCachingLinkedList expands to nothing;
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next|.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)*.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:_owner instanceof node_caching_linked_list/NodeCachingLinkedList aliases target {$R_ANY};

-- list header must exist and be distinct from other nodes
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode not null;
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode aliases nothing;

-- list header stores no data
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:value instanceof java/lang/Object expands to nothing;
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:value instanceof java/lang/Object aliases nothing;

-- all the noncached nodes must have a next and a previous
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next|.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)* instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode not null;

-- the size of a list must be greater than the number of noncached nodes (by trigger)
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next)+ instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode expands to instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode triggers node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:(Lnode_caching_linked_list/NodeCachingLinkedList$LinkedListNode;)V:_got_LinkedListNode_nonroot:{$REF};
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)+ instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode expands to instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode triggers node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:(Lnode_caching_linked_list/NodeCachingLinkedList$LinkedListNode;)V:_got_LinkedListNode_nonroot:{$REF};

-- the rightmost noncached node can be resolved by alias to the leftmost one and vice versa;
-- in this case the size of the list is exactly the number of noncached nodes (by trigger)
-- (note that these rules include the degenerate empty list case header.next == header.prev == header);
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next)* instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode aliases target {MAX}{$R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)* triggers node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:(Lnode_caching_linked_list/NodeCachingLinkedList$LinkedListNode;)V:_handleListClosure:{$REF}.{UP};
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)* instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode aliases target {MAX}{$R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next)* triggers node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:(Lnode_caching_linked_list/NodeCachingLinkedList$LinkedListNode;)V:_handleListClosure:{$REF}.{UP};

-- for all the noncached nodes e it must be e.next.previous == e and e.previous.next == e
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next)+.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode expands to nothing;
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next)+.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode aliases target {$REF}.{UP}.{UP};
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)+.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode expands to nothing;
{R_ANY}.node_caching_linked_list/NodeCachingLinkedList:header(.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:previous)+.node_caching_linked_list/NodeCachingLinkedList$LinkedListNode:next instanceof node_caching_linked_list/NodeCachingLinkedList$LinkedListNode aliases target {$REF}.{UP}.{UP};

resolve end

trigger begin
-- list initialization trigger
instanceof node_caching_linked_list/NodeCachingLinkedList expands to instanceof node_caching_linked_list/NodeCachingLinkedList triggers node_caching_linked_list/NodeCachingLinkedList$HEXTriggers:(Lnode_caching_linked_list/NodeCachingLinkedList;)V:_got_NodeCachingLinkedList_noinv:{$REF};
trigger end
